/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface BurnNFTManagementInterface extends ethers.utils.Interface {
  functions: {
    'burnNFT()': FunctionFragment
    'burnNFTCounter()': FunctionFragment
    'burnNFTPrice()': FunctionFragment
    'generate(uint256,uint256,bytes)': FunctionFragment
    'hasMinted(address)': FunctionFragment
    'initialize(address,string)': FunctionFragment
    'maxBurnNFTSupply()': FunctionFragment
    'messageSigner()': FunctionFragment
    'mint(uint8)': FunctionFragment
    'nftInfo(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setMaxBurnNFTSupply(uint256)': FunctionFragment
    'setMessageSigner(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'withdraw()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'burnNFT', values?: undefined): string
  encodeFunctionData(functionFragment: 'burnNFTCounter', values?: undefined): string
  encodeFunctionData(functionFragment: 'burnNFTPrice', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'generate',
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'hasMinted', values: [string]): string
  encodeFunctionData(functionFragment: 'initialize', values: [string, string]): string
  encodeFunctionData(functionFragment: 'maxBurnNFTSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'messageSigner', values?: undefined): string
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'nftInfo', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setMaxBurnNFTSupply',
    values: [BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'setMessageSigner', values: [string]): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(functionFragment: 'burnNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burnNFTCounter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burnNFTPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'generate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasMinted', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxBurnNFTSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'messageSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nftInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaxBurnNFTSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMessageSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Burn(address,uint256,uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'Mint(address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export type BurnEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string
    tokenId: BigNumber
    amount: BigNumber
  }
>

export type InitializedEvent = TypedEvent<[number] & { version: number }>

export type MintEvent = TypedEvent<
  [string, BigNumber] & { sender: string; tokenId: BigNumber }
>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>

export class BurnNFTManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: BurnNFTManagementInterface

  functions: {
    burnNFT(overrides?: CallOverrides): Promise<[string]>

    burnNFTCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>

    burnNFTPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    generate(
      tokenId: BigNumberish,
      amount: BigNumberish,
      allowSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    hasMinted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    initialize(
      burnNFTAddress_: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    maxBurnNFTSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    messageSigner(overrides?: CallOverrides): Promise<[string]>

    mint(
      eType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    nftInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { eType: number; score: BigNumber }>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setMaxBurnNFTSupply(
      maxBurnNFTSupply_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setMessageSigner(
      messageSigner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  burnNFT(overrides?: CallOverrides): Promise<string>

  burnNFTCounter(overrides?: CallOverrides): Promise<BigNumber>

  burnNFTPrice(overrides?: CallOverrides): Promise<BigNumber>

  generate(
    tokenId: BigNumberish,
    amount: BigNumberish,
    allowSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  hasMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>

  initialize(
    burnNFTAddress_: string,
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  maxBurnNFTSupply(overrides?: CallOverrides): Promise<BigNumber>

  messageSigner(overrides?: CallOverrides): Promise<string>

  mint(
    eType: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  nftInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { eType: number; score: BigNumber }>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setMaxBurnNFTSupply(
    maxBurnNFTSupply_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setMessageSigner(
    messageSigner_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    burnNFT(overrides?: CallOverrides): Promise<string>

    burnNFTCounter(overrides?: CallOverrides): Promise<BigNumber>

    burnNFTPrice(overrides?: CallOverrides): Promise<BigNumber>

    generate(
      tokenId: BigNumberish,
      amount: BigNumberish,
      allowSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    hasMinted(arg0: string, overrides?: CallOverrides): Promise<boolean>

    initialize(
      burnNFTAddress_: string,
      url: string,
      overrides?: CallOverrides
    ): Promise<void>

    maxBurnNFTSupply(overrides?: CallOverrides): Promise<BigNumber>

    messageSigner(overrides?: CallOverrides): Promise<string>

    mint(eType: BigNumberish, overrides?: CallOverrides): Promise<void>

    nftInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { eType: number; score: BigNumber }>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setMaxBurnNFTSupply(
      maxBurnNFTSupply_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setMessageSigner(messageSigner_: string, overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Burn(address,uint256,uint256)'(
      sender?: string | null,
      tokenId?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenId: BigNumber; amount: BigNumber }
    >

    Burn(
      sender?: string | null,
      tokenId?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; tokenId: BigNumber; amount: BigNumber }
    >

    'Initialized(uint8)'(version?: null): TypedEventFilter<[number], { version: number }>

    Initialized(version?: null): TypedEventFilter<[number], { version: number }>

    'Mint(address,uint256)'(
      sender?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { sender: string; tokenId: BigNumber }>

    Mint(
      sender?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { sender: string; tokenId: BigNumber }>

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>
  }

  estimateGas: {
    burnNFT(overrides?: CallOverrides): Promise<BigNumber>

    burnNFTCounter(overrides?: CallOverrides): Promise<BigNumber>

    burnNFTPrice(overrides?: CallOverrides): Promise<BigNumber>

    generate(
      tokenId: BigNumberish,
      amount: BigNumberish,
      allowSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    hasMinted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      burnNFTAddress_: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    maxBurnNFTSupply(overrides?: CallOverrides): Promise<BigNumber>

    messageSigner(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      eType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    nftInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setMaxBurnNFTSupply(
      maxBurnNFTSupply_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setMessageSigner(
      messageSigner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    burnNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    burnNFTCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    burnNFTPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    generate(
      tokenId: BigNumberish,
      amount: BigNumberish,
      allowSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    hasMinted(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      burnNFTAddress_: string,
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    maxBurnNFTSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    messageSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      eType: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    nftInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setMaxBurnNFTSupply(
      maxBurnNFTSupply_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setMessageSigner(
      messageSigner_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
