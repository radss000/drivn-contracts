/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface PreSalesInterface extends utils.Interface {
  functions: {
    'allowed(address)': FunctionFragment
    'buy()': FunctionFragment
    'coinPrice()': FunctionFragment
    'getAccountLockContracts(address)': FunctionFragment
    'getContractBalance()': FunctionFragment
    'getContractTokenBalance()': FunctionFragment
    'isAllowed(address)': FunctionFragment
    'lockContracts(address,uint256)': FunctionFragment
    'owner()': FunctionFragment
    'preSalesEnabled()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setAllowed(address[],bool)': FunctionFragment
    'setPreSalesEnabled(bool)': FunctionFragment
    'token()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'updateCoinPrice(uint256)': FunctionFragment
    'withdraw()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'allowed'
      | 'buy'
      | 'coinPrice'
      | 'getAccountLockContracts'
      | 'getContractBalance'
      | 'getContractTokenBalance'
      | 'isAllowed'
      | 'lockContracts'
      | 'owner'
      | 'preSalesEnabled'
      | 'renounceOwnership'
      | 'setAllowed'
      | 'setPreSalesEnabled'
      | 'token'
      | 'transferOwnership'
      | 'updateCoinPrice'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'allowed',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'buy', values?: undefined): string
  encodeFunctionData(functionFragment: 'coinPrice', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getAccountLockContracts',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'getContractBalance', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getContractTokenBalance',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'isAllowed',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'lockContracts',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'preSalesEnabled', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setAllowed',
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: 'setPreSalesEnabled',
    values: [PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'updateCoinPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(functionFragment: 'allowed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'coinPrice', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getAccountLockContracts',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getContractBalance', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getContractTokenBalance',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'isAllowed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lockContracts', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'preSalesEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAllowed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setPreSalesEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateCoinPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'CoinPriceUpdated(uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'TokenPurchase(address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CoinPriceUpdated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokenPurchase'): EventFragment
}

export interface CoinPriceUpdatedEventObject {
  newCoinPrice: BigNumber
}
export type CoinPriceUpdatedEvent = TypedEvent<[BigNumber], CoinPriceUpdatedEventObject>

export type CoinPriceUpdatedEventFilter = TypedEventFilter<CoinPriceUpdatedEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface TokenPurchaseEventObject {
  buyer: string
  amount: BigNumber
  releaseTime: BigNumber
}
export type TokenPurchaseEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TokenPurchaseEventObject
>

export type TokenPurchaseEventFilter = TypedEventFilter<TokenPurchaseEvent>

export interface PreSales extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: PreSalesInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    allowed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    buy(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    coinPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    getAccountLockContracts(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>

    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    getContractTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    isAllowed(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    lockContracts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    preSalesEnabled(overrides?: CallOverrides): Promise<[boolean]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setAllowed(
      addresses: PromiseOrValue<string>[],
      isAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPreSalesEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateCoinPrice(
      newCoinPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  allowed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  buy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  coinPrice(overrides?: CallOverrides): Promise<BigNumber>

  getAccountLockContracts(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>

  getContractTokenBalance(overrides?: CallOverrides): Promise<BigNumber>

  isAllowed(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  lockContracts(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  preSalesEnabled(overrides?: CallOverrides): Promise<boolean>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setAllowed(
    addresses: PromiseOrValue<string>[],
    isAllowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPreSalesEnabled(
    enabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  updateCoinPrice(
    newCoinPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    allowed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    buy(overrides?: CallOverrides): Promise<void>

    coinPrice(overrides?: CallOverrides): Promise<BigNumber>

    getAccountLockContracts(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>

    getContractTokenBalance(overrides?: CallOverrides): Promise<BigNumber>

    isAllowed(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    lockContracts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    preSalesEnabled(overrides?: CallOverrides): Promise<boolean>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setAllowed(
      addresses: PromiseOrValue<string>[],
      isAllowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    setPreSalesEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    updateCoinPrice(
      newCoinPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'CoinPriceUpdated(uint256)'(newCoinPrice?: null): CoinPriceUpdatedEventFilter
    CoinPriceUpdated(newCoinPrice?: null): CoinPriceUpdatedEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'TokenPurchase(address,uint256,uint256)'(
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      releaseTime?: null
    ): TokenPurchaseEventFilter
    TokenPurchase(
      buyer?: PromiseOrValue<string> | null,
      amount?: null,
      releaseTime?: null
    ): TokenPurchaseEventFilter
  }

  estimateGas: {
    allowed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    buy(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    coinPrice(overrides?: CallOverrides): Promise<BigNumber>

    getAccountLockContracts(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>

    getContractTokenBalance(overrides?: CallOverrides): Promise<BigNumber>

    isAllowed(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    lockContracts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    preSalesEnabled(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setAllowed(
      addresses: PromiseOrValue<string>[],
      isAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPreSalesEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    updateCoinPrice(
      newCoinPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    allowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    buy(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    coinPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAccountLockContracts(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getContractBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getContractTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isAllowed(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lockContracts(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    preSalesEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setAllowed(
      addresses: PromiseOrValue<string>[],
      isAllowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPreSalesEnabled(
      enabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    updateCoinPrice(
      newCoinPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
