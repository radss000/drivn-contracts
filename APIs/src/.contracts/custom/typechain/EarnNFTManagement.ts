/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface EarnNFTManagementInterface extends utils.Interface {
  functions: {
    'bicycleCounter()': FunctionFragment
    'bicycleTokenPrice()': FunctionFragment
    'calculateMergeFee(uint8)': FunctionFragment
    'carCounter()': FunctionFragment
    'carTokenPrice()': FunctionFragment
    'dailyClaimLimit()': FunctionFragment
    'dailyClaimedPower(uint256,address)': FunctionFragment
    'dailyClaimedTokens(uint256,address)': FunctionFragment
    'dailyPowerCap()': FunctionFragment
    'dailyTokenCap()': FunctionFragment
    'earnNFT()': FunctionFragment
    'generate(uint256,uint256,bytes)': FunctionFragment
    'getCurrentPower(uint256)': FunctionFragment
    'getPowerClaimed(uint256)': FunctionFragment
    'gttCoin()': FunctionFragment
    'initialize(address,address,uint256,uint256,uint256,uint256,uint256,uint256)': FunctionFragment
    'isAllowed(address)': FunctionFragment
    'lastClaimTimestamp()': FunctionFragment
    'maxBicycleSupply()': FunctionFragment
    'maxCarSupply()': FunctionFragment
    'maxScooterSupply()': FunctionFragment
    'merge(uint256[])': FunctionFragment
    'messageSigner()': FunctionFragment
    'mint(uint8)': FunctionFragment
    'nftInfo(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'scooterCounter()': FunctionFragment
    'scooterTokenPrice()': FunctionFragment
    'setAllowed(address,bool)': FunctionFragment
    'setBicycleTokenPrice(uint256)': FunctionFragment
    'setCarTokenPrice(uint256)': FunctionFragment
    'setMaxBicycleSupply(uint256)': FunctionFragment
    'setMaxCarSupply(uint256)': FunctionFragment
    'setMaxScooterSupply(uint256)': FunctionFragment
    'setMessageSigner(address)': FunctionFragment
    'setScooterTokenPrice(uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'withdraw()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'bicycleCounter'
      | 'bicycleTokenPrice'
      | 'calculateMergeFee'
      | 'carCounter'
      | 'carTokenPrice'
      | 'dailyClaimLimit'
      | 'dailyClaimedPower'
      | 'dailyClaimedTokens'
      | 'dailyPowerCap'
      | 'dailyTokenCap'
      | 'earnNFT'
      | 'generate'
      | 'getCurrentPower'
      | 'getPowerClaimed'
      | 'gttCoin'
      | 'initialize'
      | 'isAllowed'
      | 'lastClaimTimestamp'
      | 'maxBicycleSupply'
      | 'maxCarSupply'
      | 'maxScooterSupply'
      | 'merge'
      | 'messageSigner'
      | 'mint'
      | 'nftInfo'
      | 'owner'
      | 'renounceOwnership'
      | 'scooterCounter'
      | 'scooterTokenPrice'
      | 'setAllowed'
      | 'setBicycleTokenPrice'
      | 'setCarTokenPrice'
      | 'setMaxBicycleSupply'
      | 'setMaxCarSupply'
      | 'setMaxScooterSupply'
      | 'setMessageSigner'
      | 'setScooterTokenPrice'
      | 'transferOwnership'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'bicycleCounter', values?: undefined): string
  encodeFunctionData(functionFragment: 'bicycleTokenPrice', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'calculateMergeFee',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'carCounter', values?: undefined): string
  encodeFunctionData(functionFragment: 'carTokenPrice', values?: undefined): string
  encodeFunctionData(functionFragment: 'dailyClaimLimit', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'dailyClaimedPower',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'dailyClaimedTokens',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'dailyPowerCap', values?: undefined): string
  encodeFunctionData(functionFragment: 'dailyTokenCap', values?: undefined): string
  encodeFunctionData(functionFragment: 'earnNFT', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'generate',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'getCurrentPower',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getPowerClaimed',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'gttCoin', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'isAllowed',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'lastClaimTimestamp', values?: undefined): string
  encodeFunctionData(functionFragment: 'maxBicycleSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'maxCarSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'maxScooterSupply', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'merge',
    values: [PromiseOrValue<BigNumberish>[]]
  ): string
  encodeFunctionData(functionFragment: 'messageSigner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'nftInfo',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'scooterCounter', values?: undefined): string
  encodeFunctionData(functionFragment: 'scooterTokenPrice', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setAllowed',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(
    functionFragment: 'setBicycleTokenPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setCarTokenPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxBicycleSupply',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxCarSupply',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setMaxScooterSupply',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setMessageSigner',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'setScooterTokenPrice',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(functionFragment: 'bicycleCounter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'bicycleTokenPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calculateMergeFee', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'carCounter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'carTokenPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dailyClaimLimit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dailyClaimedPower', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dailyClaimedTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dailyPowerCap', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'dailyTokenCap', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'earnNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'generate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCurrentPower', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPowerClaimed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'gttCoin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isAllowed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lastClaimTimestamp', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxBicycleSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxCarSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxScooterSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'merge', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'messageSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nftInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'scooterCounter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'scooterTokenPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setAllowed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBicycleTokenPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setCarTokenPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaxBicycleSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaxCarSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaxScooterSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMessageSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setScooterTokenPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Initialized(uint8)': EventFragment
    'Merge(address,uint256,uint256,uint8)': EventFragment
    'Mint(address,uint8,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Merge'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface MergeEventObject {
  owner: string
  tokenId: BigNumber
  newPower: BigNumber
  rarity: number
}
export type MergeEvent = TypedEvent<
  [string, BigNumber, BigNumber, number],
  MergeEventObject
>

export type MergeEventFilter = TypedEventFilter<MergeEvent>

export interface MintEventObject {
  sender: string
  eType: number
  tokenId: BigNumber
}
export type MintEvent = TypedEvent<[string, number, BigNumber], MintEventObject>

export type MintEventFilter = TypedEventFilter<MintEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface EarnNFTManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: EarnNFTManagementInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    bicycleCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>

    bicycleTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    calculateMergeFee(
      newRarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    carCounter(overrides?: CallOverrides): Promise<[BigNumber] & { _value: BigNumber }>

    carTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    dailyClaimLimit(overrides?: CallOverrides): Promise<[BigNumber]>

    dailyClaimedPower(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    dailyClaimedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    dailyPowerCap(overrides?: CallOverrides): Promise<[BigNumber]>

    dailyTokenCap(overrides?: CallOverrides): Promise<[BigNumber]>

    earnNFT(overrides?: CallOverrides): Promise<[string]>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      allowSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getCurrentPower(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getPowerClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    gttCoin(overrides?: CallOverrides): Promise<[string]>

    initialize(
      earnNFTAddress_: PromiseOrValue<string>,
      gttAddress_: PromiseOrValue<string>,
      carTokenPrice_: PromiseOrValue<BigNumberish>,
      bicycleTokenPrice_: PromiseOrValue<BigNumberish>,
      scooterTokenPrice_: PromiseOrValue<BigNumberish>,
      dailyPowerCap_: PromiseOrValue<BigNumberish>,
      dailyTokenCap_: PromiseOrValue<BigNumberish>,
      dailyClaimLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    isAllowed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    lastClaimTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    maxBicycleSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    maxCarSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    maxScooterSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    merge(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    messageSigner(overrides?: CallOverrides): Promise<[string]>

    mint(
      eType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    nftInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber] & {
        nftType: number
        eType: number
        powerClaimed: BigNumber
        currentPower: BigNumber
        lastClaimTime: BigNumber
      }
    >

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    scooterCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>

    scooterTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    setAllowed(
      _address: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setBicycleTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setCarTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMaxBicycleSupply(
      maxBicycleSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMaxCarSupply(
      maxCarSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMaxScooterSupply(
      maxScooterSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMessageSigner(
      messageSigner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setScooterTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  bicycleCounter(overrides?: CallOverrides): Promise<BigNumber>

  bicycleTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

  calculateMergeFee(
    newRarity: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  carCounter(overrides?: CallOverrides): Promise<BigNumber>

  carTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

  dailyClaimLimit(overrides?: CallOverrides): Promise<BigNumber>

  dailyClaimedPower(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  dailyClaimedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  dailyPowerCap(overrides?: CallOverrides): Promise<BigNumber>

  dailyTokenCap(overrides?: CallOverrides): Promise<BigNumber>

  earnNFT(overrides?: CallOverrides): Promise<string>

  generate(
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    allowSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getCurrentPower(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getPowerClaimed(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  gttCoin(overrides?: CallOverrides): Promise<string>

  initialize(
    earnNFTAddress_: PromiseOrValue<string>,
    gttAddress_: PromiseOrValue<string>,
    carTokenPrice_: PromiseOrValue<BigNumberish>,
    bicycleTokenPrice_: PromiseOrValue<BigNumberish>,
    scooterTokenPrice_: PromiseOrValue<BigNumberish>,
    dailyPowerCap_: PromiseOrValue<BigNumberish>,
    dailyTokenCap_: PromiseOrValue<BigNumberish>,
    dailyClaimLimit_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  isAllowed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  lastClaimTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  maxBicycleSupply(overrides?: CallOverrides): Promise<BigNumber>

  maxCarSupply(overrides?: CallOverrides): Promise<BigNumber>

  maxScooterSupply(overrides?: CallOverrides): Promise<BigNumber>

  merge(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  messageSigner(overrides?: CallOverrides): Promise<string>

  mint(
    eType: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  nftInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber, BigNumber] & {
      nftType: number
      eType: number
      powerClaimed: BigNumber
      currentPower: BigNumber
      lastClaimTime: BigNumber
    }
  >

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  scooterCounter(overrides?: CallOverrides): Promise<BigNumber>

  scooterTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

  setAllowed(
    _address: PromiseOrValue<string>,
    _allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setBicycleTokenPrice(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setCarTokenPrice(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMaxBicycleSupply(
    maxBicycleSupply_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMaxCarSupply(
    maxCarSupply_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMaxScooterSupply(
    maxScooterSupply_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMessageSigner(
    messageSigner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setScooterTokenPrice(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    bicycleCounter(overrides?: CallOverrides): Promise<BigNumber>

    bicycleTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

    calculateMergeFee(
      newRarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    carCounter(overrides?: CallOverrides): Promise<BigNumber>

    carTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

    dailyClaimLimit(overrides?: CallOverrides): Promise<BigNumber>

    dailyClaimedPower(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    dailyClaimedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    dailyPowerCap(overrides?: CallOverrides): Promise<BigNumber>

    dailyTokenCap(overrides?: CallOverrides): Promise<BigNumber>

    earnNFT(overrides?: CallOverrides): Promise<string>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      allowSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    getCurrentPower(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPowerClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    gttCoin(overrides?: CallOverrides): Promise<string>

    initialize(
      earnNFTAddress_: PromiseOrValue<string>,
      gttAddress_: PromiseOrValue<string>,
      carTokenPrice_: PromiseOrValue<BigNumberish>,
      bicycleTokenPrice_: PromiseOrValue<BigNumberish>,
      scooterTokenPrice_: PromiseOrValue<BigNumberish>,
      dailyPowerCap_: PromiseOrValue<BigNumberish>,
      dailyTokenCap_: PromiseOrValue<BigNumberish>,
      dailyClaimLimit_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    isAllowed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    lastClaimTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    maxBicycleSupply(overrides?: CallOverrides): Promise<BigNumber>

    maxCarSupply(overrides?: CallOverrides): Promise<BigNumber>

    maxScooterSupply(overrides?: CallOverrides): Promise<BigNumber>

    merge(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>

    messageSigner(overrides?: CallOverrides): Promise<string>

    mint(eType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    nftInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber] & {
        nftType: number
        eType: number
        powerClaimed: BigNumber
        currentPower: BigNumber
        lastClaimTime: BigNumber
      }
    >

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    scooterCounter(overrides?: CallOverrides): Promise<BigNumber>

    scooterTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

    setAllowed(
      _address: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    setBicycleTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setCarTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setMaxBicycleSupply(
      maxBicycleSupply_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setMaxCarSupply(
      maxCarSupply_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setMaxScooterSupply(
      maxScooterSupply_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setMessageSigner(
      messageSigner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    setScooterTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'Merge(address,uint256,uint256,uint8)'(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newPower?: null,
      rarity?: null
    ): MergeEventFilter
    Merge(
      owner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      newPower?: null,
      rarity?: null
    ): MergeEventFilter

    'Mint(address,uint8,uint256)'(
      sender?: PromiseOrValue<string> | null,
      eType?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MintEventFilter
    Mint(
      sender?: PromiseOrValue<string> | null,
      eType?: PromiseOrValue<BigNumberish> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MintEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    bicycleCounter(overrides?: CallOverrides): Promise<BigNumber>

    bicycleTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

    calculateMergeFee(
      newRarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    carCounter(overrides?: CallOverrides): Promise<BigNumber>

    carTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

    dailyClaimLimit(overrides?: CallOverrides): Promise<BigNumber>

    dailyClaimedPower(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    dailyClaimedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    dailyPowerCap(overrides?: CallOverrides): Promise<BigNumber>

    dailyTokenCap(overrides?: CallOverrides): Promise<BigNumber>

    earnNFT(overrides?: CallOverrides): Promise<BigNumber>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      allowSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getCurrentPower(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPowerClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    gttCoin(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      earnNFTAddress_: PromiseOrValue<string>,
      gttAddress_: PromiseOrValue<string>,
      carTokenPrice_: PromiseOrValue<BigNumberish>,
      bicycleTokenPrice_: PromiseOrValue<BigNumberish>,
      scooterTokenPrice_: PromiseOrValue<BigNumberish>,
      dailyPowerCap_: PromiseOrValue<BigNumberish>,
      dailyTokenCap_: PromiseOrValue<BigNumberish>,
      dailyClaimLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    isAllowed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    lastClaimTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    maxBicycleSupply(overrides?: CallOverrides): Promise<BigNumber>

    maxCarSupply(overrides?: CallOverrides): Promise<BigNumber>

    maxScooterSupply(overrides?: CallOverrides): Promise<BigNumber>

    merge(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    messageSigner(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      eType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    nftInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    scooterCounter(overrides?: CallOverrides): Promise<BigNumber>

    scooterTokenPrice(overrides?: CallOverrides): Promise<BigNumber>

    setAllowed(
      _address: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setBicycleTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setCarTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMaxBicycleSupply(
      maxBicycleSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMaxCarSupply(
      maxCarSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMaxScooterSupply(
      maxScooterSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMessageSigner(
      messageSigner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setScooterTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    bicycleCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    bicycleTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    calculateMergeFee(
      newRarity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    carCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    carTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    dailyClaimLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>

    dailyClaimedPower(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    dailyClaimedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    dailyPowerCap(overrides?: CallOverrides): Promise<PopulatedTransaction>

    dailyTokenCap(overrides?: CallOverrides): Promise<PopulatedTransaction>

    earnNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      allowSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getCurrentPower(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPowerClaimed(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    gttCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      earnNFTAddress_: PromiseOrValue<string>,
      gttAddress_: PromiseOrValue<string>,
      carTokenPrice_: PromiseOrValue<BigNumberish>,
      bicycleTokenPrice_: PromiseOrValue<BigNumberish>,
      scooterTokenPrice_: PromiseOrValue<BigNumberish>,
      dailyPowerCap_: PromiseOrValue<BigNumberish>,
      dailyTokenCap_: PromiseOrValue<BigNumberish>,
      dailyClaimLimit_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    isAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    lastClaimTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxBicycleSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxCarSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    maxScooterSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    merge(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    messageSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      eType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    nftInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    scooterCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    scooterTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setAllowed(
      _address: PromiseOrValue<string>,
      _allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setBicycleTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setCarTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMaxBicycleSupply(
      maxBicycleSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMaxCarSupply(
      maxCarSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMaxScooterSupply(
      maxScooterSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMessageSigner(
      messageSigner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setScooterTokenPrice(
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
