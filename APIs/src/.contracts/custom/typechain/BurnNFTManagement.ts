/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export interface BurnNFTManagementInterface extends utils.Interface {
  functions: {
    'burnNFT()': FunctionFragment
    'burnNFTCounter()': FunctionFragment
    'burnNFTPrice()': FunctionFragment
    'generate(uint256,uint256,bytes)': FunctionFragment
    'hasMinted(address)': FunctionFragment
    'initialize(address,string)': FunctionFragment
    'maxBurnNFTSupply()': FunctionFragment
    'messageSigner()': FunctionFragment
    'mint(uint8)': FunctionFragment
    'nftInfo(uint256)': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'setMaxBurnNFTSupply(uint256)': FunctionFragment
    'setMessageSigner(address)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'withdraw()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'burnNFT'
      | 'burnNFTCounter'
      | 'burnNFTPrice'
      | 'generate'
      | 'hasMinted'
      | 'initialize'
      | 'maxBurnNFTSupply'
      | 'messageSigner'
      | 'mint'
      | 'nftInfo'
      | 'owner'
      | 'renounceOwnership'
      | 'setMaxBurnNFTSupply'
      | 'setMessageSigner'
      | 'transferOwnership'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'burnNFT', values?: undefined): string
  encodeFunctionData(functionFragment: 'burnNFTCounter', values?: undefined): string
  encodeFunctionData(functionFragment: 'burnNFTPrice', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'generate',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'hasMinted',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'maxBurnNFTSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'messageSigner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'mint',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'nftInfo',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setMaxBurnNFTSupply',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'setMessageSigner',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(functionFragment: 'burnNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burnNFTCounter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burnNFTPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'generate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasMinted', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'maxBurnNFTSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'messageSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nftInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMaxBurnNFTSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMessageSigner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Burn(address,uint256,uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'Mint(address,uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface BurnEventObject {
  sender: string
  tokenId: BigNumber
  amount: BigNumber
}
export type BurnEvent = TypedEvent<[string, BigNumber, BigNumber], BurnEventObject>

export type BurnEventFilter = TypedEventFilter<BurnEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface MintEventObject {
  sender: string
  tokenId: BigNumber
}
export type MintEvent = TypedEvent<[string, BigNumber], MintEventObject>

export type MintEventFilter = TypedEventFilter<MintEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface BurnNFTManagement extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: BurnNFTManagementInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    burnNFT(overrides?: CallOverrides): Promise<[string]>

    burnNFTCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>

    burnNFTPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      allowSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    hasMinted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

    initialize(
      burnNFTAddress_: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    maxBurnNFTSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    messageSigner(overrides?: CallOverrides): Promise<[string]>

    mint(
      eType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    nftInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { eType: number; score: BigNumber }>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMaxBurnNFTSupply(
      maxBurnNFTSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMessageSigner(
      messageSigner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  burnNFT(overrides?: CallOverrides): Promise<string>

  burnNFTCounter(overrides?: CallOverrides): Promise<BigNumber>

  burnNFTPrice(overrides?: CallOverrides): Promise<BigNumber>

  generate(
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    allowSignature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  hasMinted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

  initialize(
    burnNFTAddress_: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  maxBurnNFTSupply(overrides?: CallOverrides): Promise<BigNumber>

  messageSigner(overrides?: CallOverrides): Promise<string>

  mint(
    eType: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  nftInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { eType: number; score: BigNumber }>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMaxBurnNFTSupply(
    maxBurnNFTSupply_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setMessageSigner(
    messageSigner_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    burnNFT(overrides?: CallOverrides): Promise<string>

    burnNFTCounter(overrides?: CallOverrides): Promise<BigNumber>

    burnNFTPrice(overrides?: CallOverrides): Promise<BigNumber>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      allowSignature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    hasMinted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    initialize(
      burnNFTAddress_: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    maxBurnNFTSupply(overrides?: CallOverrides): Promise<BigNumber>

    messageSigner(overrides?: CallOverrides): Promise<string>

    mint(eType: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

    nftInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { eType: number; score: BigNumber }>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setMaxBurnNFTSupply(
      maxBurnNFTSupply_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    setMessageSigner(
      messageSigner_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Burn(address,uint256,uint256)'(
      sender?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): BurnEventFilter
    Burn(
      sender?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): BurnEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'Mint(address,uint256)'(
      sender?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MintEventFilter
    Mint(
      sender?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MintEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    burnNFT(overrides?: CallOverrides): Promise<BigNumber>

    burnNFTCounter(overrides?: CallOverrides): Promise<BigNumber>

    burnNFTPrice(overrides?: CallOverrides): Promise<BigNumber>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      allowSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    hasMinted(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      burnNFTAddress_: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    maxBurnNFTSupply(overrides?: CallOverrides): Promise<BigNumber>

    messageSigner(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      eType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    nftInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMaxBurnNFTSupply(
      maxBurnNFTSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setMessageSigner(
      messageSigner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    burnNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    burnNFTCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>

    burnNFTPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    generate(
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      allowSignature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    hasMinted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    initialize(
      burnNFTAddress_: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    maxBurnNFTSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    messageSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      eType: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    nftInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMaxBurnNFTSupply(
      maxBurnNFTSupply_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setMessageSigner(
      messageSigner_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
