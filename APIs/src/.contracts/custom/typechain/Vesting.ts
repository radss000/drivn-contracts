/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common'

export declare namespace Vesting {
  export type VestingPeriodStruct = {
    startTimestamp: PromiseOrValue<BigNumberish>
    duration: PromiseOrValue<BigNumberish>
    linearUnits: PromiseOrValue<BigNumberish>
    percentageD: PromiseOrValue<BigNumberish>
  }

  export type VestingPeriodStructOutput = [BigNumber, number, number, BigNumber] & {
    startTimestamp: BigNumber
    duration: number
    linearUnits: number
    percentageD: BigNumber
  }

  export type VestingRoundStruct = {
    name: PromiseOrValue<string>
    periods: Vesting.VestingPeriodStruct[]
  }

  export type VestingRoundStructOutput = [string, Vesting.VestingPeriodStructOutput[]] & {
    name: string
    periods: Vesting.VestingPeriodStructOutput[]
  }
}

export interface VestingInterface extends utils.Interface {
  functions: {
    'ROOT()': FunctionFragment
    'claimAll(uint256[],bytes32[],uint256)': FunctionFragment
    'claimSingle(uint256,uint256[],bytes32[],uint256)': FunctionFragment
    'claimed(address,uint256)': FunctionFragment
    'getAllocations()': FunctionFragment
    'getRound(uint256)': FunctionFragment
    'getRounds()': FunctionFragment
    'init(uint256,string,bytes32,(string,(uint64,uint32,uint32,uint128)[])[])': FunctionFragment
    'owner()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'resetROOT(bytes32,string)': FunctionFragment
    'roundLength()': FunctionFragment
    'rounds(uint256)': FunctionFragment
    'startTimestamp()': FunctionFragment
    'token()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unlocked(uint256,uint256)': FunctionFragment
    'withdraw(address,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'ROOT'
      | 'claimAll'
      | 'claimSingle'
      | 'claimed'
      | 'getAllocations'
      | 'getRound'
      | 'getRounds'
      | 'init'
      | 'owner'
      | 'renounceOwnership'
      | 'resetROOT'
      | 'roundLength'
      | 'rounds'
      | 'startTimestamp'
      | 'token'
      | 'transferOwnership'
      | 'unlocked'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'ROOT', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'claimAll',
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'claimSingle',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'claimed',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'getAllocations', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getRound',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'getRounds', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'init',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      Vesting.VestingRoundStruct[]
    ]
  ): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'resetROOT',
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'roundLength', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'rounds',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'startTimestamp', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(
    functionFragment: 'unlocked',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string

  decodeFunctionResult(functionFragment: 'ROOT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimSingle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'claimed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getAllocations', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRound', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRounds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'resetROOT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'roundLength', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rounds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'startTimestamp', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unlocked', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Claim(uint256,address,string,uint256)': EventFragment
    'Initialized(uint8)': EventFragment
    'InitializedVesting(uint256,address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Claim'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'InitializedVesting'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface ClaimEventObject {
  timestamp: BigNumber
  user: string
  roundName: string
  amount: BigNumber
}
export type ClaimEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  ClaimEventObject
>

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>

export interface InitializedEventObject {
  version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface InitializedVestingEventObject {
  timestamp: BigNumber
  user: string
}
export type InitializedVestingEvent = TypedEvent<
  [BigNumber, string],
  InitializedVestingEventObject
>

export type InitializedVestingEventFilter = TypedEventFilter<InitializedVestingEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface Vesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: VestingInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    ROOT(overrides?: CallOverrides): Promise<[string]>

    claimAll(
      allocations: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BytesLike>[],
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    claimSingle(
      roundId: PromiseOrValue<BigNumberish>,
      allocations: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BytesLike>[],
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    claimed(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getAllocations(overrides?: CallOverrides): Promise<[string]>

    getRound(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Vesting.VestingRoundStructOutput]>

    getRounds(overrides?: CallOverrides): Promise<[Vesting.VestingRoundStructOutput[]]>

    init(
      startTimestamp_: PromiseOrValue<BigNumberish>,
      leaves_: PromiseOrValue<string>,
      root_: PromiseOrValue<BytesLike>,
      rounds_: Vesting.VestingRoundStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    resetROOT(
      root_: PromiseOrValue<BytesLike>,
      leaves_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    roundLength(overrides?: CallOverrides): Promise<[BigNumber]>

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { name: string }>

    startTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unlocked(
      id: PromiseOrValue<BigNumberish>,
      allocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    withdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  ROOT(overrides?: CallOverrides): Promise<string>

  claimAll(
    allocations: PromiseOrValue<BigNumberish>[],
    proof: PromiseOrValue<BytesLike>[],
    targetAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  claimSingle(
    roundId: PromiseOrValue<BigNumberish>,
    allocations: PromiseOrValue<BigNumberish>[],
    proof: PromiseOrValue<BytesLike>[],
    targetAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  claimed(
    user: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getAllocations(overrides?: CallOverrides): Promise<string>

  getRound(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Vesting.VestingRoundStructOutput>

  getRounds(overrides?: CallOverrides): Promise<Vesting.VestingRoundStructOutput[]>

  init(
    startTimestamp_: PromiseOrValue<BigNumberish>,
    leaves_: PromiseOrValue<string>,
    root_: PromiseOrValue<BytesLike>,
    rounds_: Vesting.VestingRoundStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  resetROOT(
    root_: PromiseOrValue<BytesLike>,
    leaves_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  roundLength(overrides?: CallOverrides): Promise<BigNumber>

  rounds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  startTimestamp(overrides?: CallOverrides): Promise<BigNumber>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  unlocked(
    id: PromiseOrValue<BigNumberish>,
    allocation: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  withdraw(
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    ROOT(overrides?: CallOverrides): Promise<string>

    claimAll(
      allocations: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BytesLike>[],
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    claimSingle(
      roundId: PromiseOrValue<BigNumberish>,
      allocations: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BytesLike>[],
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    claimed(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAllocations(overrides?: CallOverrides): Promise<string>

    getRound(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Vesting.VestingRoundStructOutput>

    getRounds(overrides?: CallOverrides): Promise<Vesting.VestingRoundStructOutput[]>

    init(
      startTimestamp_: PromiseOrValue<BigNumberish>,
      leaves_: PromiseOrValue<string>,
      root_: PromiseOrValue<BytesLike>,
      rounds_: Vesting.VestingRoundStruct[],
      overrides?: CallOverrides
    ): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    resetROOT(
      root_: PromiseOrValue<BytesLike>,
      leaves_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    roundLength(overrides?: CallOverrides): Promise<BigNumber>

    rounds(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    unlocked(
      id: PromiseOrValue<BigNumberish>,
      allocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {
    'Claim(uint256,address,string,uint256)'(
      timestamp?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      roundName?: null,
      amount?: null
    ): ClaimEventFilter
    Claim(
      timestamp?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      roundName?: null,
      amount?: null
    ): ClaimEventFilter

    'Initialized(uint8)'(version?: null): InitializedEventFilter
    Initialized(version?: null): InitializedEventFilter

    'InitializedVesting(uint256,address)'(
      timestamp?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): InitializedVestingEventFilter
    InitializedVesting(
      timestamp?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null
    ): InitializedVestingEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
  }

  estimateGas: {
    ROOT(overrides?: CallOverrides): Promise<BigNumber>

    claimAll(
      allocations: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BytesLike>[],
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    claimSingle(
      roundId: PromiseOrValue<BigNumberish>,
      allocations: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BytesLike>[],
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    claimed(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getAllocations(overrides?: CallOverrides): Promise<BigNumber>

    getRound(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getRounds(overrides?: CallOverrides): Promise<BigNumber>

    init(
      startTimestamp_: PromiseOrValue<BigNumberish>,
      leaves_: PromiseOrValue<string>,
      root_: PromiseOrValue<BytesLike>,
      rounds_: Vesting.VestingRoundStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    resetROOT(
      root_: PromiseOrValue<BytesLike>,
      leaves_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    roundLength(overrides?: CallOverrides): Promise<BigNumber>

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    startTimestamp(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    unlocked(
      id: PromiseOrValue<BigNumberish>,
      allocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimAll(
      allocations: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BytesLike>[],
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    claimSingle(
      roundId: PromiseOrValue<BigNumberish>,
      allocations: PromiseOrValue<BigNumberish>[],
      proof: PromiseOrValue<BytesLike>[],
      targetAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    claimed(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getAllocations(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRound(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getRounds(overrides?: CallOverrides): Promise<PopulatedTransaction>

    init(
      startTimestamp_: PromiseOrValue<BigNumberish>,
      leaves_: PromiseOrValue<string>,
      root_: PromiseOrValue<BytesLike>,
      rounds_: Vesting.VestingRoundStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    resetROOT(
      root_: PromiseOrValue<BytesLike>,
      leaves_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    roundLength(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rounds(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    startTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    unlocked(
      id: PromiseOrValue<BigNumberish>,
      allocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    withdraw(
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
